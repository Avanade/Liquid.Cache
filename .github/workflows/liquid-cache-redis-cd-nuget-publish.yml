# CD workflow to publish a new version of the library on Nuget.org
name: Liquid.Cache.Redis library pack and push to Nuget.org

on:
  push:
    branches: [ main ]
    paths:
    - 'src/Liquid.Cache.Redis/**'
    
  pull_request:
    branches: [ main ]
    paths:
    - 'src/Liquid.Cache.Redis/**'

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        redis-version: [4, 5, 6]

    steps:
    - name: Checkout repo Pull Request
      if: github.event_name == 'pull_request'
      uses: actions/checkout@v2
      with:
        ref: ${{github.event.pull_request.head.ref}}
        repository: ${{github.event.pull_request.head.repo.full_name}}
    
    - name: Checkout repo Push
      if: github.event_name == 'push'
      uses: actions/checkout@v2
    
    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v1.7.2
      with:
        # SDK version to use. Examples: 2.2.104, 3.1, 3.1.x
        dotnet-version: 3.1.x

    - name: Restore dependencies
      run: dotnet restore src/Liquid.Cache.Redis/Liquid.Cache.Redis.csproj

    - name: Build Project
      run: dotnet build src/Liquid.Cache.Redis/Liquid.Cache.Redis.csproj --configuration Release --no-restore

    - name: Start Redis
      uses: supercharge/redis-github-action@1.2.0
      with:
        redis-version: ${{ matrix.redis-version }}  

    - name: Run Tests
      run: dotnet test src/Liquid.Cache.Redis.Tests/*Tests.csproj --settings $GITHUB_WORKSPACE/src/CodeCoverage.runsettings
      
    - name: Nuget Pack
      run: dotnet pack --no-build --configuration Release src/Liquid.Cache.Redis/Liquid.Cache.Redis.csproj --output .
      
    - name: PushNuget
      if: github.event_name == 'push' 
      run: dotnet nuget push *.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{secrets.PUBLISH_TO_NUGET_ORG}} --skip-duplicate
